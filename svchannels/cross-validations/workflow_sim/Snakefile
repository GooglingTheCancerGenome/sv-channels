from snakemake.utils import min_version
min_version("3.2")
import os

basedir="/project/gcg/Data/simulated-data/"
reference="/project/gcg/Data/1KG/reference/GRCh38_full_analysis_set_plus_decoy_hla.fa"
excl_list="/project/gcg/Data/1KG/github/sv-channels_141222/data/exclude.N-and-encodebl.bed"

PARAMS=['coverage', 'insert-size', 'read-length']

def get_basedir():
    return [os.path.join(basedir,"coverage/sv-gen/snakemake/data/out/dup_indel_inv_tra/")] * 6 + \
    [os.path.join(basedir,"insert-size/i150/sv-gen/snakemake/data/out/dup_indel_inv_tra/")] * 6 + \
    [os.path.join(basedir,"read-length/sv-gen/snakemake/data/out/dup_indel_inv_tra/")] * 6

def get_basedir(ptype):
    if ptype == 'coverage':
        return os.path.join(basedir,"coverage/sv-gen/snakemake/data/out/dup_indel_inv_tra/")
    elif ptype == 'insert-size':
        os.path.join(basedir,"insert-size/i150/sv-gen/snakemake/data/out/dup_indel_inv_tra/")
    elif ptype == 'read-length':
        os.path.join(basedir,"read-length/sv-gen/snakemake/data/out/dup_indel_inv_tra/")

def get_param_type():
    return ['coverage'] * 8 + ['insert-size'] * 6 + ['read-length'] * 6

def get_cov():
    return [5, 10, 15, 30, 45, 60, 75, 90]+[30]*12

def get_isize():
    return [500]*8+[200,250,300,400,500,600]+[500]*6

def get_rlen():
    return [150]*14+[36,50,75,100,150,250]

def get_genotype():
    return ['hmz','htz']*18

def get_params_list():
    params_list = []
    for g in ['hmz','htz']:
        for d,c,i,r in zip(
                        [os.path.join(basedir, "coverage/sv-gen/snakemake/data/out/dup_indel_inv_tra/")]* 6 +
                        [os.path.join(basedir,"insert-size/i150/sv-gen/snakemake/data/out/dup_indel_inv_tra/")] * 6 +
                        [os.path.join(basedir,"read-length/sv-gen/snakemake/data/out/dup_indel_inv_tra/")] * 6,
                        [5, 10, 15, 30, 45, 60, 75, 90]+[30]*12,
                        [500]*6+[200,250,300,400,500,600]+[500]*6,
                        [150]*12+[36,50,75,100,150,250]
        ):
            params_list.append((d,c,i,r,g))

    return params_list

def get_bam(param):
    bam_list = []
    for gt in ['hmz','htz']:
        if param == 'coverage':
            for cov in [5,10,15,30,45,60,75,90]:
                bam_list.append(
                    os.path.join(
                        basedir,
                        "coverage/sv-gen/snakemake/data/out/dup_indel_inv_tra/"+\
                        "r150_i500/cov"+str(cov)+"/"+gt+"-sv.bam"
                ))
        elif param == 'insert-size':
            for isize in [200,250,300,400,500,600]:
                bam_list.append(
                    os.path.join(
                        basedir,
                        "insert-size/i150/sv-gen/snakemake/data/out/dup_indel_inv_tra/"+\
                        "r150_i"+str(isize)+"/cov30/"+gt+"-sv.bam"
                ))
        elif param == 'read-length':
            for rlen in [36,50,75,100,150,250]:
                bam_list.append(
                    os.path.join(
                        basedir,
                        "read-length/sv-gen/snakemake/data/out/dup_indel_inv_tra/"+\
                        "r"+str(rlen)+"_i500/cov30/"+gt+"-sv.bam"
                ))
    return bam_list


def get_bamfile(p):
    d, c, i, r, g = p
    return os.path.join(
                        d,
                        "r"+str(r)+"_i"+str(i)+"/cov"+str(c)+"/"+g+"-sv.bam"
                )


rule all:
  input:
      expand([os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
          "gridss", "gridss.vcf.gz")],
          zip,
          ptype=get_param_type(),
          cov=get_cov(),
          isize=get_isize(),
          rlen=get_rlen(),
          gt=get_genotype(),
      ),
      expand([os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
          "manta")],
          zip,
          ptype=get_param_type(),
          cov=get_cov(),
          isize=get_isize(),
          rlen=get_rlen(),
          gt=get_genotype(),
      )


rule manta:
  input:
    bam="/project/gcg/Data/simulated-data/{ptype}/sv-gen/snakemake/data/"
        "out/dup_indel_inv_tra/r{rlen}_i{isize}/cov{cov}/{gt}-sv.bam",
  params:
    fasta=reference,
    debug="/usr/bin/time -v"
  output:
    dir=directory(os.path.join('{ptype}', 'c{cov}','i{isize}',
        'r{rlen}', '{gt}', 'manta'))
  threads: 24
  conda:
    "manta"
  shell:
    '''
    set -euo pipefail;
    {params.debug} configManta.py  \
        --referenceFasta {params.fasta} \
        --bam {input.bam} \
        --runDir {output.dir};
    {params.debug} {output.dir}/runWorkflow.py \
        -m local -j {threads}
    '''


rule gridss:
    input:
        bam="/project/gcg/Data/simulated-data/{ptype}/sv-gen/snakemake/data/"
            "out/dup_indel_inv_tra/r{rlen}_i{isize}/cov{cov}/{gt}-sv.bam",
        bl=excl_list
    params:
        fasta=reference,
        debug="/usr/bin/time -v"
    output:
        vcf=os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
          "gridss", "gridss.vcf.gz"),
        assembly=os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
          "gridss", "assembly.bam")
    threads: 24
    conda:
        "gridss2"
    shell:
        '''
        set -euo pipefail;
        export_JAVA_OPTIONS = "-Xmx31g";
        {params.debug} gridss gridss.CallVariants \
            WORKER_THREADS={threads} \
            REFERENCE_SEQUENCE={params.fasta} \
            OUTPUT={output.vcf} \
            ASSEMBLY={output.assembly} \
            INPUT={input.bam} \
            BLACKLIST={input.bl}
        '''


rule extract_signals:
    input:
        bam = "/project/gcg/Data/simulated-data/{ptype}/sv-gen/snakemake/data/"
              "out/dup_indel_inv_tra/r{rlen}_i{isize}/cov{cov}/{gt}-sv.bam"
    params:
        fasta=reference
    output:
        dir=directory(os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","signals"))
    conda:
        "refactor"
    shell:
        '''
        set -euo pipefail;
        svchannels extract-signals {params.fasta} {input.bam} {output.dir}
        '''

rule generate_channels:
    input:
        dir = os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","signals"),
        bedpe = os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","channels","sv_positions.bedpe")
    params:
        fasta=reference
    output:
        dir=directory(os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","channels"))
    shell:
        '''
        set -euo pipefail;
        svchannels generate-channels --reference {params.fasta} {input.dir} {output.dir} {input.bedpe}
        '''

rule label:
    input:
        sv_positions=os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","channels","sv_positions.bedpe"),
        truth_set="/project/gcg/Data/simulated-data/{ptype}/sv-gen/snakemake/data/"
                  "out/dup_indel_inv_tra/{gt}-sv.proper.bedpe",
        fai="/project/gcg/Data/simulated-data/{ptype}/sv-gen/snakemake/data/10_12_hs37d5.fasta.fai"
    output:
        dir=directory(os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","labels"))
    shell:
        '''
        svchannels label \
            -v {input.sv_positions} \
            -g {input.truth_set} \
            -f {input.fai} \
            -p {output.dir}
        '''

rule cv:
    input:
        svchan=os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
               "svchannels","channels", "channel.zarr.zip"),
        svlab=os.path.join("{ptype}", "c{cov}", "i{isize}", "r{rlen}", "{gt}",
            "svchannels","labels","labels.json.gz")
    params:
        epochs=1,
        ncalls=12,
        batch_size=32,
        validation_split=0.3,
        kfolds=2,
        svtype='DEL'
    output:
        log="results_wf0/{test_sample}/{test_sample}.optimize.log",
        model="results_wf0/{test_sample}/{test_sample}.model.keras"
    shell:
        '''
        set -euo pipefail;
        svchannels cv \
          {svchan_list} \
          {svlab_list} \
          -o {outdir} \
          -l {output.log} \
          --validation_split {params.validation_split} \
          --kfolds {params.kfolds} \
          --epochs {params.epochs} \
          --ncalls {params.ncalls} \
          --batch_size {params.batch_size} \
          --svtype {params.svtype} \
          --manta_vcf {input.vcf} \
          --vcf_out {output.vcf}
          '''
